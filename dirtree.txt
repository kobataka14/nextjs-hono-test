.
├── prisma
│   ├── migrations
│   │   ├── 20250224123607_init
│   │   │   └── migration.sql
│   │   └── migration_lock.toml
│   └── schema.prisma
├── src
│   ├── app
│   │   ├── api
│   │   │   └── [[...route]]
│   │   │       └── route.ts
│   ├── server
│   │   ├── handlers
│   │   │   └── users
│   │   │       ├── index.ts
│   │   │       ├── createUser.ts
│   │   │       ├── deleteUser.ts
│   │   │       ├── getUser.ts
│   │   │       ├── getUsers.ts
│   │   │       └── updateUser.ts
│   │   ├── lib
│   │   │   └── db.ts
│   │   ├── middlewares
│   │   │   ├── errorHandler.ts
│   │   │   └── validationError.ts
│   │   ├── repositories
│   │   │   ├── index.ts
│   │   │   └── users.ts
│   │   ├── routes
│   │   │   ├── health.ts
│   │   │   └── users.ts
│   │   └── schemas
│   │       ├── errors.ts
│   │       ├── hobbies.ts
│   │       └── users.ts
│   └── types
│       └── api.d.ts
├── test


/prisma/	Prisma の ORM 用フォルダ（データベーススキーマとマイグレーションを管理）
/prisma/migrations/	データベースのマイグレーションファイルを保存
/prisma/schema.prisma	Prisma のスキーマ定義ファイル（データベースモデルを記述）
/src/app/api/[[...route]]/	Next.js の API ルートハンドラー（Hono のエントリーポイント）
/src/server/middlewares/	共通のミドルウェア管理（例: errorHandler.ts でエラーハンドリング）
/src/server/repositories/	データベースアクセスに使用
/src/server/lib/	ライブラリやユーティリティ等（db,auth...）
/src/server/routes/	API ルート定義（users.ts など、各エンドポイントのエントリーポイント）
/src/server/handlers/	ビジネスロジックを担当（CRUDごとに分割し、個別の処理を実装）
/src/schemas/	Zod スキーマを管理（users.ts でユーザーの入力バリデーション、errors.ts でエラースキーマ）
/src/types/api.d.ts	openapi-typescript APIの型定義（フロントエンドで使用。openapi-typescriptで生成）